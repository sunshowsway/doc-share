操作系统：Ubuntu 16.04
双网卡
第一块网卡配置如下
auto ens3
iface ens3 inet dhcp
第二块网卡配置如下
auto ens4
iface ens4 inet manual
up ip link set dev ens4 up
down ip link set dev ens4 down

#1.安装pip
apt-get update
apt-get install python-pip
pip install --upgrade pip
Ubuntu16.04更新pip到10.0.1版本会有bug，导致pip无法运行，将/usr/bin/pip修改为如下内容即可
#!/usr/bin/python
# GENERATED BY DEBIAN
import sys
import re
# Run the main entry point, similarly to how setuptools does it, but because
# we didn't install the actual entry point from setup.py, don't use the
# pkg_resources API.
#from pip import main
from pip._internal import main as _main
if __name__ == '__main__':
        sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])
        sys.exit(_main())

#2.安装docker
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt-get update
apt-get install -y docker-ce

#3.安装tox
pip install tox

#4.将打包好的zun代码拷贝至/etc并解压
cd /etc 
tar -xzvf zun.tar.gz

#5.下载kolla并安装依赖
apt-get install python-dev libffi-dev gcc libssl-dev python-selinux
git clone https://github.com/openstack/kolla

#6.生成kolla-build.conf
cd /root/kolla
tox -e genconfig

#7.新建/etc/kolla，并将生成的kolla-build.conf拷贝至/etc/kolla
mkdir /etc/kolla
cp /root/kolla/etc/kolla/kolla-build.conf /etc/kolla/

#8.修改kolla-build.conf
[DEFAULT]
install_type = source

[zun-base]
type = local
location = /etc/zun

#9.初始化zun目录
cd /etc/zun
git init

#10.开始构建zun服务镜像
/root/kolla/kolla/cmd/build.py --config-file /etc/kolla/kolla-build.conf zun
在此过程中可能会因为网络原因导致镜像构建失败，建议科学上网

#11.构建OpenStack其他服务的镜像
/root/kolla/kolla/cmd/build.py --config-file /etc/kolla/kolla-build.conf --profile main
/root/kolla/kolla/cmd/build.py --config-file /etc/kolla/kolla-build.conf --profile infra

#12.构建本地镜像仓库
docker run -d -p 4000:5000 -v /opt/docker/registry:/tmp/registry registry
宿主机5000端口被占用，所以将端口映射至4000

#13.修改所有kolla创建的镜像的标签，以kolla/centos-source-zun-compute为例
docker tag kolla/centos-source-zun-compute:7.0.0 127.0.0.1:4000/kolla/centos-source-zun-compute:7.0.0

#14.将修改标签后的所有镜像上传至本地仓库，以127.0.0.1:4000/kolla/centos-source-zun-compute为例
docker push 127.0.0.1:4000/kolla/centos-source-zun-compute:7.0.0

#15.安装kolla-ansible
git clone http://git.trystack.cn/openstack/kolla-ansible -b stable/queens
修改如下文件
sed -i 's/^ - docker/# - docker/' ~/kolla-ansible/ansible/roles/baremetal/defaults/main.yml

cat << EOF > ~/kolla-ansible/ansible/roles/baremetal/templates/docker_systemd_service.j2
[Service]
MountFlags=shared
ExecStart=
ExecStart=/usr/bin/{{ docker_binary_name|default("docker daemon", true) }}{% if docker_registry %} --insecure-registry {{ docker_registry }}{% endif %}{% if docker_storage_driver %} --storage-driver {{ docker_storage_driver }}{% endif %} -H tcp://{{ api_interface_address }}:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://{{ api_interface_address }}:2379 --cluster-advertise={{ api_interface_address }}:2375
EOF

cd ~/kolla-ansible/
cp -r etc/kolla /etc/kolla
pip install -r requirements.txt
python setup.py install

#16.生成密码文件
kolla-genpwd

#17.修改/etc/kolla/passwords.yml文件
keystone_admin_password: password

#18.修改/etc/kolla/globals.yml文件
kolla_base_distro: "centos"
kolla_install_type: "source"
openstack_release: "7.0.0"
kolla_internal_vip_address: "本机第一块网卡ip地址"
docker_registry: "127.0.0.1:4000"
docker_namespace: "kolla"
network_interface: "ens3"
neutron_external_interface: "ens4"
enable_opendaylight_l3: "no"
enable_cinder_backup: "no"
enable_etcd: "yes"
enable_fluentd: "no"
enable_haproxy: "no"
enable_heat: "no"
enable_kuryr: "yes"
enable_zun: "yes"
nova_compute_virt_type: "kvm"

#19.将kolla-ansible/ansible/inventory/中的文件复制到/root
cp /root/kolla-ansible/ansible/inventory/* .

#20.准备基础环境
cd /root
kolla-ansible -i all-in-one bootstrap-servers

#21.precheck
kolla-ansible prechecks -i all-in-one

#22.pull镜像
kolla-ansible pull -i all-in-one

#23.部署OpenStack
kolla-ansible deploy -i all-in-one

#24.生成环境变量
kolla-ansible post-deploy

说明：我在部署完OpenStack后，发现zun服务挂了，进入zun-compute查看日志发现报错：zun数据库中找不到表，进入mariadb容器，发现数据库zun内没有任何表。查找资料后判断可能是之前安装失败后未清除容器就继续安装导致的，但最近实验室网络故障，无法上网，目前该解决方案未验证。
